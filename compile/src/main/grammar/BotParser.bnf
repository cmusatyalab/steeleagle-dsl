{
  // only for the compiler, not the IDE
  generate=[
    java='11'
    psi-factory='no'
    visitor='no'
  ]
  generatePsi=false

  // we only need the parser and element types.
  parserClass='org.droneDSL.compile.parser.BotPsiParser'
  elementTypeHolderClass='org.droneDSL.compile.parser.BotPsiElementTypes'
  elementTypeClass='org.droneDSL.compile.parser.BotPsiElementType'
  tokenTypeClass='org.droneDSL.compile.parser.BotPsiTokenType'
}

// file structure
file ::= task_type_decl* task mission

task_type_decl ::= TASK_TYPE_KW task_type <<braced task_type_body>>
task_type_body ::= ID

// defining the task
task ::= TASK_KW <<braced task_decl*>>
task_decl ::= task_type task_name task_body
task_body ::= <<braced <<commaSep attributes>>>>
private attributes ::= attribute*
attribute ::=  ID <<coloned attribute_expr>>
    //attribute expression: could be number, name, list of waypoints, waypoints variable , list of hsv values
attribute_expr ::= NUMBER | name | <<square_bracked <<commaSep <<paren tuple>> >> >> | <<angle_bracked name>> | <<paren tuple>>
tuple ::= NUMBER COMMA NUMBER COMMA NUMBER

task_type ::= TASK_DETECT_KW | TASK_TRACK_KW | TASK_AVOID_KW | TASK_TEST_KW | name
task_name ::= name
name ::= ID

// defining the mission
mission ::= MISSION_KW <<braced mission_content>>
mission_content ::= mission_start_decl mission_transition*
mission_start_decl ::= MISSION_START_KW task_name
mission_transition ::= TRANSITION_KW <<paren cond>> task_name ARROW task_name
cond ::= ID <<paren (NUMBER | ID) >>?


// meta rules
// we can improve the parsing by producing generically from a 'commaSep' rule
meta paren ::= LPAREN <<param>> RPAREN
meta angle_bracked ::= LANGL <<param>> RANGL
meta square_bracked ::= LSQUA <<param>> RSQUA
private meta coloned ::= COLON <<param>>
private meta commaSep ::= <<param>> (COMMA <<param>>) *
private meta braced ::= LBRACE <<param>> RBRACE
